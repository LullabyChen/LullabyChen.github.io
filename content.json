{"meta":{"title":"Cabin","subtitle":null,"description":null,"author":"Duo","url":"https://lullabychen.github.io"},"pages":[{"title":"categories","date":"2019-01-24T04:04:56.000Z","updated":"2019-01-24T10:37:56.781Z","comments":false,"path":"categories/index.html","permalink":"https://lullabychen.github.io/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2019-01-24T04:04:04.000Z","updated":"2019-01-24T10:32:37.497Z","comments":false,"path":"tags/index.html","permalink":"https://lullabychen.github.io/tags/index.html","excerpt":"","text":""},{"title":"about","date":"2019-01-24T04:02:05.000Z","updated":"2019-01-24T10:38:42.601Z","comments":false,"path":"about/index.html","permalink":"https://lullabychen.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"Intellij IDEA插件开发入门（一）","slug":"Plugin1","date":"2019-01-27T13:13:10.000Z","updated":"2019-01-28T09:28:47.278Z","comments":true,"path":"2019/01/27/Plugin1/","link":"","permalink":"https://lullabychen.github.io/2019/01/27/Plugin1/","excerpt":"Intellij IDEA插件开发有两种方式： Gradle Plugin Devkit 本文根据官方推荐使用Gradle。 1. 插件开发环境 IDEA: 社区版本 Project JDK: 1.8 Gradle: 4.10","text":"Intellij IDEA插件开发有两种方式： Gradle Plugin Devkit 本文根据官方推荐使用Gradle。 1. 插件开发环境 IDEA: 社区版本 Project JDK: 1.8 Gradle: 4.10 2. 确认Gradle可用菜单Preferences -&gt; Plugins 3. 创建Plugin项目 （官方推荐勾选“Use default cradle wrapper”，以便IDEA自动安装Gradle需要的包） 项目创建完成。 工程结构： plugin.xml文件内容： id：当前插件的唯一id号。 name：插件的名称。 version：插件的版本号。 vendor：开发人的邮箱、公司名称。 description：插件的描述，如果将插件上传到IDEA的仓库，在进行下载时会显示该描述。 idea-version：表示当前插件所支持的所有IDEA版本。 extensions：一般放一些我们自己扩展的东西，比如新增高亮显示、新增语言支持。 actions：新增的类在这里注册，用于菜单栏扩展。 4. 配置Gradle插件在build.gradle文件中，设置运行插件的沙箱地址。 5. 创建一个action 自定义功能加在Window菜单栏下。 在plugin.xml文件中，项目自动生成action配置： 6. Gradle运行配置菜单Edit Configurations -&gt; Run/Debug Configurations 点击’+’号，新建Gradle Run Configuration。 7. 运行项目 在Window菜单栏加入我们自定义的’Greeting’选项，点击弹出’Hello World!’。 8. 打包插件参考文献： IDEA官方插件开发手册http://www.jetbrains.org/intellij/sdk/docs/basics.html","categories":[{"name":"Notes","slug":"Notes","permalink":"https://lullabychen.github.io/categories/Notes/"}],"tags":[{"name":"Intellij Plugin","slug":"Intellij-Plugin","permalink":"https://lullabychen.github.io/tags/Intellij-Plugin/"}]},{"title":"Keras学习（一）：Mac OS下安装基于TensorFlow的Keras","slug":"Keras1","date":"2019-01-24T01:20:32.000Z","updated":"2019-01-25T04:23:35.878Z","comments":true,"path":"2019/01/24/Keras1/","link":"","permalink":"https://lullabychen.github.io/2019/01/24/Keras1/","excerpt":"操作系统：macOs High Sierra 10.13.6 1. TensorFlow安装必备：Python 采用pip方式安装TensorFlow，命令如下： 1sudo pip install tensorflow 在输入该命令过程中遇到问题如下：（如无遇到可跳过） 1Could not find a version that satisfies the requirement tensorflow ...... 原因是python版本问题：最新的anaconda中python版本已经更新到python3.7，而tensorflow只支持到python3.6。","text":"操作系统：macOs High Sierra 10.13.6 1. TensorFlow安装必备：Python 采用pip方式安装TensorFlow，命令如下： 1sudo pip install tensorflow 在输入该命令过程中遇到问题如下：（如无遇到可跳过） 1Could not find a version that satisfies the requirement tensorflow ...... 原因是python版本问题：最新的anaconda中python版本已经更新到python3.7，而tensorflow只支持到python3.6。 在anaconda官网中给出了三种解决方案： 选择第二种方案，在命令行输入如下命令： 1sudo conda install python=3.6 python3.6安装完成。再如上输入命令，tensorflow安装完成。 2. Keras安装采用pip方式安装Keras，命令如下： 1sudo pip install keras Keras安装完成。 3. 实例测试","categories":[{"name":"Notes","slug":"Notes","permalink":"https://lullabychen.github.io/categories/Notes/"}],"tags":[{"name":"Keras","slug":"Keras","permalink":"https://lullabychen.github.io/tags/Keras/"}]},{"title":"Hello World","slug":"hello-world","date":"2019-01-18T11:46:20.519Z","updated":"2019-01-24T11:03:39.496Z","comments":true,"path":"2019/01/18/hello-world/","link":"","permalink":"https://lullabychen.github.io/2019/01/18/hello-world/","excerpt":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}